#include <pybind11/pybind11.h>
#include <pybind11/eigen.h>
#include <Eigen/Dense>
#include <iostream>
#include <math.h>
#include <stdio.h>


using namespace Eigen;

void fast_eigenvector_solver(double* eigv, int neig, Eigen::Matrix<double, 16, 16>& AM, Matrix<std::complex<double>, 2, 16>& sols);



MatrixXcd solver_robust_autocal(const VectorXd& data, int *num_sols)
{
    // Compute coefficients
    const double* d = data.data();
    VectorXd coeffs(30);
    coeffs[0] = d[15];
    coeffs[1] = d[16];
    coeffs[2] = d[18];
    coeffs[3] = d[21];
    coeffs[4] = d[25];
    coeffs[5] = d[17];
    coeffs[6] = d[19];
    coeffs[7] = d[22];
    coeffs[8] = d[26];
    coeffs[9] = d[20];
    coeffs[10] = d[23];
    coeffs[11] = d[27];
    coeffs[12] = d[24];
    coeffs[13] = d[28];
    coeffs[14] = d[29];
    coeffs[15] = d[0];
    coeffs[16] = d[1];
    coeffs[17] = d[3];
    coeffs[18] = d[6];
    coeffs[19] = d[10];
    coeffs[20] = d[2];
    coeffs[21] = d[4];
    coeffs[22] = d[7];
    coeffs[23] = d[11];
    coeffs[24] = d[5];
    coeffs[25] = d[8];
    coeffs[26] = d[12];
    coeffs[27] = d[9];
    coeffs[28] = d[13];
    coeffs[29] = d[14];



    // Setup elimination template
    static const int coeffs0_ind[] = { 0,15,1,0,15,16,2,1,0,15,16,17,3,2,1,0,15,16,17,18,4,3,2,1,16,17,18,19,4,3,2,17,18,19,4,3,18,19,5,0,15,20,6,5,20,1,15,0,16,21,7,6,5,20,21,2,16,15,1,17,0,22,8,7,6,5,20,21,22,3,17,16,2,18,1,23,8,7,6,21,22,23,4,18,17,3,19,2,9,5,20,0,15,24,10,9,24,6,20,5,21,1,16,0,15,25,11,10,9,24,25,7,21,20,6,22,2,17,1,16,5,26,12,9,24,5,20,0,15,27,13,12,27,10,24,9,25,6,21,5,1,16,20,28,11,10,9,24,25,26,8,22,21,7,23,3,18,2,17,6,8,7,22,23,19,18,4,3,4,19 };
    static const int coeffs1_ind[] = { 14,29,14,29,12,27,14,29,12,27,9,24,14,12,27,9,24,5,20,29,14,29,13,27,12,28,10,25,9,6,21,24,13,12,27,28,11,25,24,10,26,7,22,6,2,17,21,9,29,14,13,28,12,10,25,27,14,29,28,27,13,11,26,10,7,22,25,12,13,12,27,28,26,25,11,8,23,7,3,18,22,10,11,10,25,26,23,22,8,4,19,3,18,7,14,13,28,29,29,13,11,26,28,14,14,29,28,11,8,23,26,13,13,28,26,8,4,19,23,11,11,26,23,4,19,8,8,23,19,4 };
    static const int C0_ind[] = { 0,19,20,21,26,39,40,41,42,45,46,59,60,61,62,63,64,65,66,79,80,81,82,83,84,85,86,99,101,102,103,104,105,106,122,123,124,125,140,147,151,159,160,161,166,167,168,170,171,179,180,181,182,185,186,187,188,189,190,191,198,199,200,201,202,203,204,205,206,207,208,209,210,211,218,219,221,222,223,224,225,226,227,228,229,230,231,238,240,247,251,252,253,259,260,261,266,267,268,270,271,272,273,274,277,279,280,281,282,285,286,287,288,289,290,291,292,293,294,297,298,299,300,307,311,312,313,315,316,319,320,321,326,327,328,330,331,332,333,334,335,336,337,339,341,342,343,344,345,346,347,348,349,350,351,352,353,354,357,358,362,363,364,365,368,369,370,378,383,384 };
    static const int C1_ind[] = { 15,16,32,33,35,36,47,51,52,53,55,56,60,67,71,72,73,75,76,79,81,86,87,88,90,91,92,93,94,95,96,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,128,130,132,133,134,135,136,137,142,145,148,149,150,152,153,154,155,156,157,158,162,163,164,165,168,169,170,172,173,174,175,176,177,178,182,183,184,185,188,189,190,192,193,194,197,198,214,215,216,217,229,234,235,236,237,238,243,244,249,254,255,256,257,258,263,264,269,274,275,276,277,278,283,284,289,294,297,298,303,304,309,318 };

    Matrix<double, 20, 20> C0; C0.setZero();
    Matrix<double, 20, 16> C1; C1.setZero();
    for (int i = 0; i < 170; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
    for (int i = 0; i < 130; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); }

    Matrix<double, 20, 16> C12 = C0.partialPivLu().solve(C1);




    // Setup action matrix
    Matrix<double, 20, 16> RR;
    RR << -C12.bottomRows(4), Matrix<double, 16, 16>::Identity(16, 16);

    static const int AM_ind[] = { 14,10,8,0,9,1,11,12,13,2,15,16,17,18,19,3 };
    Matrix<double, 16, 16> AM;
    for (int i = 0; i < 16; i++) {
        AM.row(i) = RR.row(AM_ind[i]);
    }

    Matrix<std::complex<double>, 2, 16> sols;
    sols.setZero();

    // Solve eigenvalue problem

    EigenSolver<MatrixXd> es(AM, false);
    ArrayXcd D = es.eigenvalues();

    int nroots = 0;
    double eigv[16];
    for (int i = 0; i < 16; i++) {
        if (std::abs(D(i).imag()) < 1e-6)
            eigv[nroots++] = D(i).real();
    }

    fast_eigenvector_solver(eigv, nroots, AM, sols);

    *num_sols = nroots;


    return sols;
}
// Action =  y
// Quotient ring basis (V) = 1,x,x^2,x^3,x^2*y,x^2*y^2,x*y,x*y^2,x*y^3,x*y^4,y,y^2,y^3,y^4,y^5,y^6,
// Available monomials (RR*V) = x^3*y,x^2*y^3,x*y^5,y^7,1,x,x^2,x^3,x^2*y,x^2*y^2,x*y,x*y^2,x*y^3,x*y^4,y,y^2,y^3,y^4,y^5,y^6,


void fast_eigenvector_solver(double* eigv, int neig, Eigen::Matrix<double, 16, 16>& AM, Matrix<std::complex<double>, 2, 16>& sols) {
    static const int ind[] = { 3,5,9,15 };
    // Truncated action matrix containing non-trivial rows
    Matrix<double, 4, 16> AMs;
    double zi[7];

    for (int i = 0; i < 4; i++) {
        AMs.row(i) = AM.row(ind[i]);
    }
    for (int i = 0; i < neig; i++) {
        zi[0] = eigv[i];
        for (int j = 1; j < 7; j++)
        {
            zi[j] = zi[j - 1] * eigv[i];
        }
        Matrix<double, 4, 4> AA;
        AA.col(0) = AMs.col(3);
        AA.col(1) = AMs.col(2) + zi[0] * AMs.col(4) + zi[1] * AMs.col(5);
        AA.col(2) = AMs.col(1) + zi[0] * AMs.col(6) + zi[1] * AMs.col(7) + zi[2] * AMs.col(8) + zi[3] * AMs.col(9);
        AA.col(3) = AMs.col(0) + zi[0] * AMs.col(10) + zi[1] * AMs.col(11) + zi[2] * AMs.col(12) + zi[3] * AMs.col(13) + zi[4] * AMs.col(14) + zi[5] * AMs.col(15);
        AA(0, 0) = AA(0, 0) - zi[0];
        AA(1, 1) = AA(1, 1) - zi[2];
        AA(2, 2) = AA(2, 2) - zi[4];
        AA(3, 3) = AA(3, 3) - zi[6];


        Matrix<double, 3, 1>  s = AA.leftCols(3).householderQr().solve(-AA.col(3));
        sols(0, i) = s(2);
        sols(1, i) = zi[0];

    }
}


std::tuple<double, double, double, double, double, double, int, VectorXd> focals_from_F(Matrix3d F, double f1prior, double u1prior, double v1prior, double f2prior, double u2prior, double v2prior, double w1, double w2, double w3, double w4, int max_iters, bool all_iters){
//std::pair<double, double> focals_from_F(Matrix3d F, double f1prior, double u1prior, double v1prior, double f2prior, double u2prior, double v2prior, double w1, double w2, double w3, double w4){
    double f1prior_sq = std::pow(f1prior, 2), u1prior_sq = std::pow(u1prior, 2), v1prior_sq = std::pow(v1prior, 2);
    double f2prior_sq = std::pow(f2prior, 2), u2prior_sq = std::pow(u2prior, 2), v2prior_sq = std::pow(v2prior, 2);

    double l1, l2;

    JacobiSVD<Matrix3d> svd(F, ComputeFullU | ComputeFullV);
    svd.computeV();
    svd.computeU();
    Vector3d singularValues = svd.singularValues();

    // Extract the first two singular values
    double s1 = singularValues(0);
    double s2 = singularValues(1);

    /*std::cout << "s: " << s1 << ", " << s2;
    std::cout << "V:" << std::endl;
    std::cout << svd.matrixV() << std::endl;
    std::cout << "U:" << std::endl;
    std::cout << svd.matrixU() << std::endl;*/

    Matrix4d V = Matrix4d::Zero();
    Matrix4d U = Matrix4d::Zero();

    // Keep matlab indexing
    V.bottomRightCorner(3, 3) = svd.matrixV();
    U.bottomRightCorner(3, 3) = svd.matrixU();

    double cf1p1, cf1p2, cu1p1, cu1p2, cv1p1, cv1p2, cf2p1, cf2p2, cu2p1, cu2p2, cv2p1, cv2p2;
    double cf1p1_sq, cf1p2_sq, cu1p1_sq, cu1p2_sq, cv1p1_sq, cv1p2_sq, cf2p1_sq, cf2p2_sq, cu2p1_sq, cu2p2_sq, cv2p1_sq, cv2p2_sq;

    double c11, c12, c13, c14, c15, c16, c17, c18, c19, c110, c111, c112, c113, c114, c115;
    double c21, c22, c23, c24, c25, c26, c27, c28, c29, c210, c211, c212, c213, c214, c215;

    double f1n = f1prior, u1n = u1prior, v1n = v1prior;
    double f2n = f2prior, u2n = u2prior, v2n = v2prior;
    
    double f1n_sq, u1n_sq, v1n_sq, f2n_sq, u2n_sq, v2n_sq;

    double df1, du1, dv1, df2, du2, dv2;

    VectorXd err(max_iters + 1);
    err.setZero();
    int k;

    for (k = 0; k < max_iters + 1; k++) {

        f1n_sq = std::pow(f1n, 2);
        u1n_sq = std::pow(u1n, 2);
        v1n_sq = std::pow(v1n, 2);

        f2n_sq = std::pow(f2n, 2);
        u2n_sq = std::pow(u2n, 2);
        v2n_sq = std::pow(v2n, 2);


        cf1p1 = 1 / w1 * (s2 * (2 * V(1, 1) * V(1, 2) * f1n + 2 * V(2, 1) * V(2, 2) * f1n) * (U(1, 2) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 2) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 2) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) + s1 * (2 * f1n * V(1, 1) * V(1, 1) + 2 * f1n * V(2, 1) * V(2, 1)) * (U(1, 1) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 1) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 1) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)));
        cf1p2 = 1 / w1 * (s1 * (2 * V(1, 1) * V(1, 2) * f1n + 2 * V(2, 1) * V(2, 2) * f1n) * (U(1, 1) * (U(3, 1) * u2n + U(1, 1) * (f2n_sq + u2n_sq) + U(2, 1) * u2n * v2n) + U(2, 1) * (U(3, 1) * v2n + U(2, 1) * (f2n_sq + v2n_sq) + U(1, 1) * u2n * v2n) + U(3, 1) * (U(3, 1) + U(1, 1) * u2n + U(2, 1) * v2n)) + s2 * (2 * f1n * V(1, 2) * V(1, 2) + 2 * f1n * V(2, 2) * V(2, 2)) * (U(1, 1) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 1) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 1) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)));

        cu1p1 = 1 / w2 * (s1 * (U(1, 1) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 1) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 1) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) * (V(1, 1) * V(3, 1) + V(1, 1) * (V(3, 1) + 2 * V(1, 1) * u1n + V(2, 1) * v1n) + V(1, 1) * V(2, 1) * v1n) + s2 * (U(1, 2) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 2) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 2) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) * (V(1, 2) * V(3, 1) + V(1, 1) * (V(3, 2) + 2 * V(1, 2) * u1n + V(2, 2) * v1n) + V(1, 2) * V(2, 1) * v1n));
        cu1p2 = 1 / w2 * (s1 * (U(1, 1) * (U(3, 1) * u2n + U(1, 1) * (f2n_sq + u2n_sq) + U(2, 1) * u2n * v2n) + U(2, 1) * (U(3, 1) * v2n + U(2, 1) * (f2n_sq + v2n_sq) + U(1, 1) * u2n * v2n) + U(3, 1) * (U(3, 1) + U(1, 1) * u2n + U(2, 1) * v2n)) * (V(1, 2) * V(3, 1) + V(1, 1) * (V(3, 2) + 2 * V(1, 2) * u1n + V(2, 2) * v1n) + V(1, 2) * V(2, 1) * v1n) + s2 * (U(1, 1) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 1) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 1) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) * (V(1, 2) * V(3, 2) + V(1, 2) * (V(3, 2) + 2 * V(1, 2) * u1n + V(2, 2) * v1n) + V(1, 2) * V(2, 2) * v1n));

        cv1p1 = 1 / w2 * (s1 * (U(1, 1) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 1) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 1) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) * (V(2, 1) * V(3, 1) + V(2, 1) * (V(3, 1) + V(1, 1) * u1n + 2 * V(2, 1) * v1n) + V(1, 1) * V(2, 1) * u1n) + s2 * (U(1, 2) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 2) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 2) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) * (V(2, 2) * V(3, 1) + V(2, 1) * (V(3, 2) + V(1, 2) * u1n + 2 * V(2, 2) * v1n) + V(1, 1) * V(2, 2) * u1n));
        cv1p2 = 1 / w2 * (s1 * (U(1, 1) * (U(3, 1) * u2n + U(1, 1) * (f2n_sq + u2n_sq) + U(2, 1) * u2n * v2n) + U(2, 1) * (U(3, 1) * v2n + U(2, 1) * (f2n_sq + v2n_sq) + U(1, 1) * u2n * v2n) + U(3, 1) * (U(3, 1) + U(1, 1) * u2n + U(2, 1) * v2n)) * (V(2, 2) * V(3, 1) + V(2, 1) * (V(3, 2) + V(1, 2) * u1n + 2 * V(2, 2) * v1n) + V(1, 1) * V(2, 2) * u1n) + s2 * (U(1, 1) * (U(3, 2) * u2n + U(1, 2) * (f2n_sq + u2n_sq) + U(2, 2) * u2n * v2n) + U(2, 1) * (U(3, 2) * v2n + U(2, 2) * (f2n_sq + v2n_sq) + U(1, 2) * u2n * v2n) + U(3, 1) * (U(3, 2) + U(1, 2) * u2n + U(2, 2) * v2n)) * (V(2, 2) * V(3, 2) + V(2, 2) * (V(3, 2) + V(1, 2) * u1n + 2 * V(2, 2) * v1n) + V(1, 2) * V(2, 2) * u1n));


        cf2p1 = 1 / w3 * (s1 * (2 * U(1, 1) * U(1, 2) * f2n + 2 * U(2, 1) * U(2, 2) * f2n) * (V(1, 1) * (V(3, 1) * u1n + V(1, 1) * (f1n_sq + u1n_sq) + V(2, 1) * u1n * v1n) + V(2, 1) * (V(3, 1) * v1n + V(2, 1) * (f1n_sq + v1n_sq) + V(1, 1) * u1n * v1n) + V(3, 1) * (V(3, 1) + V(1, 1) * u1n + V(2, 1) * v1n)) + s2 * (2 * f2n * U(1, 2) * U(1, 2) + 2 * f2n * U(2, 2) * U(2, 2)) * (V(1, 1) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 1) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 1) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)));
        cf2p2 = 1 / w3 * (s2 * (2 * U(1, 1) * U(1, 2) * f2n + 2 * U(2, 1) * U(2, 2) * f2n) * (V(1, 2) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 2) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 2) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) + s1 * (2 * f2n * U(1, 1) * U(1, 1) + 2 * f2n * U(2, 1) * U(2, 1)) * (V(1, 1) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 1) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 1) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)));

        cu2p1 = 1 / w4 * (s1 * (V(1, 1) * (V(3, 1) * u1n + V(1, 1) * (f1n_sq + u1n_sq) + V(2, 1) * u1n * v1n) + V(2, 1) * (V(3, 1) * v1n + V(2, 1) * (f1n_sq + v1n_sq) + V(1, 1) * u1n * v1n) + V(3, 1) * (V(3, 1) + V(1, 1) * u1n + V(2, 1) * v1n)) * (U(1, 2) * U(3, 1) + U(1, 1) * (U(3, 2) + 2 * U(1, 2) * u2n + U(2, 2) * v2n) + U(1, 2) * U(2, 1) * v2n) + s2 * (V(1, 1) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 1) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 1) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) * (U(1, 2) * U(3, 2) + U(1, 2) * (U(3, 2) + 2 * U(1, 2) * u2n + U(2, 2) * v2n) + U(1, 2) * U(2, 2) * v2n));
        cu2p2 = 1 / w4 * (s1 * (V(1, 1) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 1) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 1) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) * (U(1, 1) * U(3, 1) + U(1, 1) * (U(3, 1) + 2 * U(1, 1) * u2n + U(2, 1) * v2n) + U(1, 1) * U(2, 1) * v2n) + s2 * (V(1, 2) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 2) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 2) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) * (U(1, 2) * U(3, 1) + U(1, 1) * (U(3, 2) + 2 * U(1, 2) * u2n + U(2, 2) * v2n) + U(1, 2) * U(2, 1) * v2n));

        cv2p1 = 1 / w4 * (s1 * (V(1, 1) * (V(3, 1) * u1n + V(1, 1) * (f1n_sq + u1n_sq) + V(2, 1) * u1n * v1n) + V(2, 1) * (V(3, 1) * v1n + V(2, 1) * (f1n_sq + v1n_sq) + V(1, 1) * u1n * v1n) + V(3, 1) * (V(3, 1) + V(1, 1) * u1n + V(2, 1) * v1n)) * (U(2, 2) * U(3, 1) + U(2, 1) * (U(3, 2) + U(1, 2) * u2n + 2 * U(2, 2) * v2n) + U(1, 1) * U(2, 2) * u2n) + s2 * (V(1, 1) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 1) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 1) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) * (U(2, 2) * U(3, 2) + U(2, 2) * (U(3, 2) + U(1, 2) * u2n + 2 * U(2, 2) * v2n) + U(1, 2) * U(2, 2) * u2n));
        cv2p2 = 1 / w4 * (s1 * (V(1, 1) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 1) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 1) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) * (U(2, 1) * U(3, 1) + U(2, 1) * (U(3, 1) + U(1, 1) * u2n + 2 * U(2, 1) * v2n) + U(1, 1) * U(2, 1) * u2n) + s2 * (V(1, 2) * (V(3, 2) * u1n + V(1, 2) * (f1n_sq + u1n_sq) + V(2, 2) * u1n * v1n) + V(2, 2) * (V(3, 2) * v1n + V(2, 2) * (f1n_sq + v1n_sq) + V(1, 2) * u1n * v1n) + V(3, 2) * (V(3, 2) + V(1, 2) * u1n + V(2, 2) * v1n)) * (U(2, 2) * U(3, 1) + U(2, 1) * (U(3, 2) + U(1, 2) * u2n + 2 * U(2, 2) * v2n) + U(1, 1) * U(2, 2) * u2n));

        cf1p1_sq = std::pow(cf1p1, 2);
        cf1p2_sq = std::pow(cf1p2, 2);
        cu1p1_sq = std::pow(cu1p1, 2);
        cu1p2_sq = std::pow(cu1p2, 2);
        cv1p1_sq = std::pow(cv1p1, 2);
        cv1p2_sq = std::pow(cv1p2, 2);
        cf2p1_sq = std::pow(cf2p1, 2);
        cf2p2_sq = std::pow(cf2p2, 2);
        cu2p1_sq = std::pow(cu2p1, 2);
        cu2p2_sq = std::pow(cu2p2, 2);
        cv2p1_sq = std::pow(cv2p1, 2);
        cv2p2_sq = std::pow(cv2p2, 2);

        c11 = s1 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 1) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 1) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p1_sq + cu2p1_sq) + U(2, 2) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 2) * (cf2p1_sq + cv2p1_sq) + U(1, 2) * cu2p1 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1));
        c12 = s1 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 1) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 1) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s2 * (U(1, 2) * (U(1, 2) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 2) * cu2p1 * cv2p2 + U(2, 2) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 2) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 2) * cu2p1 * cv2p2 + U(1, 2) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s1 * (V(1, 1) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 1) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) + s2 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 2) * (U(1, 2) * (cf2p1_sq + cu2p1_sq) + U(2, 2) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 2) * (cf2p1_sq + cv2p1_sq) + U(1, 2) * cu2p1 * cv2p1));
        c13 = s1 * (V(1, 1) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 1) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(3, 2) * (U(1, 2) * cu2p1 + U(2, 2) * cv2p1) + U(1, 2) * (U(3, 2) * cu2p1 + U(1, 2) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 2) * cv2p1 * u2prior + U(2, 2) * cu2p1 * v2prior) + U(2, 2) * (U(3, 2) * cv2p1 + U(2, 2) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 2) * cv2p1 * u2prior + U(1, 2) * cu2p1 * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(3, 1) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 1) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 1) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p1_sq + cu2p1_sq) + U(2, 2) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 2) * (cf2p1_sq + cv2p1_sq) + U(1, 2) * cu2p1 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior));
        c14 = s1 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 1) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 1) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 1) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 1) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p1_sq + cu2p1_sq) + U(2, 2) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 2) * (cf2p1_sq + cv2p1_sq) + U(1, 2) * cu2p1 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p2_sq + cu2p2_sq) + U(2, 2) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 2) * (cf2p2_sq + cv2p2_sq) + U(1, 2) * cu2p2 * cv2p2)) * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s1 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 1) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 1) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) + s2 * (U(1, 2) * (U(1, 2) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 2) * cu2p1 * cv2p2 + U(2, 2) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 2) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 2) * cu2p1 * cv2p2 + U(1, 2) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1));
        c15 = s1 * (V(1, 1) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 1) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(3, 2) * (U(1, 2) * cu2p1 + U(2, 2) * cv2p1) + U(1, 2) * (U(3, 2) * cu2p1 + U(1, 2) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 2) * cv2p1 * u2prior + U(2, 2) * cu2p1 * v2prior) + U(2, 2) * (U(3, 2) * cv2p1 + U(2, 2) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 2) * cv2p1 * u2prior + U(1, 2) * cu2p1 * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(3, 1) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 1) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 1) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 2) * cu2p1 * cv2p2 + U(2, 2) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 2) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 2) * cu2p1 * cv2p2 + U(1, 2) * cu2p2 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s1 * (V(1, 1) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 1) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(3, 2) * (U(1, 2) * cu2p2 + U(2, 2) * cv2p2) + U(1, 2) * (U(3, 2) * cu2p2 + U(1, 2) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 2) * cv2p2 * u2prior + U(2, 2) * cu2p2 * v2prior) + U(2, 2) * (U(3, 2) * cv2p2 + U(2, 2) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 2) * cv2p2 * u2prior + U(1, 2) * cu2p2 * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(3, 1) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 1) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 1) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p1_sq + cu2p1_sq) + U(2, 2) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 2) * (cf2p1_sq + cv2p1_sq) + U(1, 2) * cu2p1 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior));
        c16 = s1 * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(3, 1) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 1) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 1) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(3, 2) * (U(1, 2) * cu2p1 + U(2, 2) * cv2p1) + U(1, 2) * (U(3, 2) * cu2p1 + U(1, 2) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 2) * cv2p1 * u2prior + U(2, 2) * cu2p1 * v2prior) + U(2, 2) * (U(3, 2) * cv2p1 + U(2, 2) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 2) * cv2p1 * u2prior + U(1, 2) * cu2p1 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s1 * (V(1, 1) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 1) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(1, 2) * (U(3, 2) * u2prior + U(1, 2) * (f2prior_sq + u2prior_sq) + U(2, 2) * u2prior * v2prior) + U(2, 2) * (U(3, 2) * v2prior + U(2, 2) * (f2prior_sq + v2prior_sq) + U(1, 2) * u2prior * v2prior) + U(3, 2) * (U(3, 2) + U(1, 2) * u2prior + U(2, 2) * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 1) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 1) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 1) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p1_sq + cu2p1_sq) + U(2, 2) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 2) * (cf2p1_sq + cv2p1_sq) + U(1, 2) * cu2p1 * cv2p1)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior));
        c17 = s1 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 1) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 1) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s2 * (U(1, 2) * (U(1, 2) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 2) * cu2p1 * cv2p2 + U(2, 2) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 2) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 2) * cu2p1 * cv2p2 + U(1, 2) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s1 * (V(1, 1) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 1) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) + s2 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 2) * (U(1, 2) * (cf2p2_sq + cu2p2_sq) + U(2, 2) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 2) * (cf2p2_sq + cv2p2_sq) + U(1, 2) * cu2p2 * cv2p2));
        c18 = s1 * (V(1, 1) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 1) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(3, 2) * (U(1, 2) * cu2p2 + U(2, 2) * cv2p2) + U(1, 2) * (U(3, 2) * cu2p2 + U(1, 2) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 2) * cv2p2 * u2prior + U(2, 2) * cu2p2 * v2prior) + U(2, 2) * (U(3, 2) * cv2p2 + U(2, 2) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 2) * cv2p2 * u2prior + U(1, 2) * cu2p2 * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(3, 1) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 1) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 1) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 2) * cu2p1 * cv2p2 + U(2, 2) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 2) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 2) * cu2p1 * cv2p2 + U(1, 2) * cu2p2 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s1 * (V(1, 1) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 1) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(3, 2) * (U(1, 2) * cu2p1 + U(2, 2) * cv2p1) + U(1, 2) * (U(3, 2) * cu2p1 + U(1, 2) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 2) * cv2p1 * u2prior + U(2, 2) * cu2p1 * v2prior) + U(2, 2) * (U(3, 2) * cv2p1 + U(2, 2) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 2) * cv2p1 * u2prior + U(1, 2) * cu2p1 * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(3, 1) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 1) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 1) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p2_sq + cu2p2_sq) + U(2, 2) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 2) * (cf2p2_sq + cv2p2_sq) + U(1, 2) * cu2p2 * cv2p2)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior));
        c19 = s1 * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(3, 1) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 1) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 1) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s1 * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(3, 1) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 1) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 1) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(3, 2) * (U(1, 2) * cu2p1 + U(2, 2) * cv2p1) + U(1, 2) * (U(3, 2) * cu2p1 + U(1, 2) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 2) * cv2p1 * u2prior + U(2, 2) * cu2p1 * v2prior) + U(2, 2) * (U(3, 2) * cv2p1 + U(2, 2) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 2) * cv2p1 * u2prior + U(1, 2) * cu2p1 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(3, 2) * (U(1, 2) * cu2p2 + U(2, 2) * cv2p2) + U(1, 2) * (U(3, 2) * cu2p2 + U(1, 2) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 2) * cv2p2 * u2prior + U(2, 2) * cu2p2 * v2prior) + U(2, 2) * (U(3, 2) * cv2p2 + U(2, 2) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 2) * cv2p2 * u2prior + U(1, 2) * cu2p2 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s1 * (V(1, 1) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 1) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 2) * (U(3, 2) * u2prior + U(1, 2) * (f2prior_sq + u2prior_sq) + U(2, 2) * u2prior * v2prior) + U(2, 2) * (U(3, 2) * v2prior + U(2, 2) * (f2prior_sq + v2prior_sq) + U(1, 2) * u2prior * v2prior) + U(3, 2) * (U(3, 2) + U(1, 2) * u2prior + U(2, 2) * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 1) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 1) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 1) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 2) * cu2p1 * cv2p2 + U(2, 2) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 2) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 2) * cu2p1 * cv2p2 + U(1, 2) * cu2p2 * cv2p1)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior));
        c110 = s1 * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(1, 1) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 1) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 1) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(3, 2) * (U(1, 2) * cu2p1 + U(2, 2) * cv2p1) + U(1, 2) * (U(3, 2) * cu2p1 + U(1, 2) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 2) * cv2p1 * u2prior + U(2, 2) * cu2p1 * v2prior) + U(2, 2) * (U(3, 2) * cv2p1 + U(2, 2) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 2) * cv2p1 * u2prior + U(1, 2) * cu2p1 * v2prior)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s1 * (V(3, 1) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 1) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 1) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) * (U(1, 2) * (U(3, 2) * u2prior + U(1, 2) * (f2prior_sq + u2prior_sq) + U(2, 2) * u2prior * v2prior) + U(2, 2) * (U(3, 2) * v2prior + U(2, 2) * (f2prior_sq + v2prior_sq) + U(1, 2) * u2prior * v2prior) + U(3, 2) * (U(3, 2) + U(1, 2) * u2prior + U(2, 2) * v2prior));
        c111 = s1 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 1) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 1) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p2_sq + cu2p2_sq) + U(2, 2) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 2) * (cf2p2_sq + cv2p2_sq) + U(1, 2) * cu2p2 * cv2p2)) * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2));
        c112 = s1 * (V(1, 1) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 1) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(3, 2) * (U(1, 2) * cu2p2 + U(2, 2) * cv2p2) + U(1, 2) * (U(3, 2) * cu2p2 + U(1, 2) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 2) * cv2p2 * u2prior + U(2, 2) * cu2p2 * v2prior) + U(2, 2) * (U(3, 2) * cv2p2 + U(2, 2) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 2) * cv2p2 * u2prior + U(1, 2) * cu2p2 * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(3, 1) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 1) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 1) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p2_sq + cu2p2_sq) + U(2, 2) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 2) * (cf2p2_sq + cv2p2_sq) + U(1, 2) * cu2p2 * cv2p2)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior));
        c113 = s1 * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(3, 1) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 1) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 1) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(3, 2) * (U(1, 2) * cu2p2 + U(2, 2) * cv2p2) + U(1, 2) * (U(3, 2) * cu2p2 + U(1, 2) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 2) * cv2p2 * u2prior + U(2, 2) * cu2p2 * v2prior) + U(2, 2) * (U(3, 2) * cv2p2 + U(2, 2) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 2) * cv2p2 * u2prior + U(1, 2) * cu2p2 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s1 * (V(1, 1) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 1) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(1, 2) * (U(3, 2) * u2prior + U(1, 2) * (f2prior_sq + u2prior_sq) + U(2, 2) * u2prior * v2prior) + U(2, 2) * (U(3, 2) * v2prior + U(2, 2) * (f2prior_sq + v2prior_sq) + U(1, 2) * u2prior * v2prior) + U(3, 2) * (U(3, 2) + U(1, 2) * u2prior + U(2, 2) * v2prior)) + s1 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 1) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 1) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 1) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(1, 2) * (cf2p2_sq + cu2p2_sq) + U(2, 2) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 2) * (cf2p2_sq + cv2p2_sq) + U(1, 2) * cu2p2 * cv2p2)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior));
        c114 = s1 * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(1, 1) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 1) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 1) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(3, 2) * (U(1, 2) * cu2p2 + U(2, 2) * cv2p2) + U(1, 2) * (U(3, 2) * cu2p2 + U(1, 2) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 2) * cv2p2 * u2prior + U(2, 2) * cu2p2 * v2prior) + U(2, 2) * (U(3, 2) * cv2p2 + U(2, 2) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 2) * cv2p2 * u2prior + U(1, 2) * cu2p2 * v2prior)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s1 * (V(3, 1) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 1) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 1) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) * (U(1, 2) * (U(3, 2) * u2prior + U(1, 2) * (f2prior_sq + u2prior_sq) + U(2, 2) * u2prior * v2prior) + U(2, 2) * (U(3, 2) * v2prior + U(2, 2) * (f2prior_sq + v2prior_sq) + U(1, 2) * u2prior * v2prior) + U(3, 2) * (U(3, 2) + U(1, 2) * u2prior + U(2, 2) * v2prior));
        c115 = s1 * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) * (V(1, 1) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 1) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 1) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(3, 2) * u2prior + U(1, 2) * (f2prior_sq + u2prior_sq) + U(2, 2) * u2prior * v2prior) + U(2, 2) * (U(3, 2) * v2prior + U(2, 2) * (f2prior_sq + v2prior_sq) + U(1, 2) * u2prior * v2prior) + U(3, 2) * (U(3, 2) + U(1, 2) * u2prior + U(2, 2) * v2prior)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior));



        c21 = s1 * (U(1, 1) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 1) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 2) * (V(1, 2) * (cf1p1_sq + cu1p1_sq) + V(2, 2) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 2) * (cf1p1_sq + cv1p1_sq) + V(1, 2) * cu1p1 * cv1p1));
        c22 = s1 * (U(1, 1) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 1) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s2 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 2) * (cf1p1_sq + cu1p1_sq) + V(2, 2) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 2) * (cf1p1_sq + cv1p1_sq) + V(1, 2) * cu1p1 * cv1p1)) + s1 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 1) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 1) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) + s2 * (V(1, 2) * (V(1, 2) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 2) * cu1p1 * cv1p2 + V(2, 2) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 2) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 2) * cu1p1 * cv1p2 + V(1, 2) * cu1p2 * cv1p1)) * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1));
        c23 = s1 * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(3, 1) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 1) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 1) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (cf1p1_sq + cu1p1_sq) + V(2, 2) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 2) * (cf1p1_sq + cv1p1_sq) + V(1, 2) * cu1p1 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 1) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(3, 2) * (V(1, 2) * cu1p1 + V(2, 2) * cv1p1) + V(1, 2) * (V(3, 2) * cu1p1 + V(1, 2) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 2) * cv1p1 * u1prior + V(2, 2) * cu1p1 * v1prior) + V(2, 2) * (V(3, 2) * cv1p1 + V(2, 2) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 2) * cv1p1 * u1prior + V(1, 2) * cu1p1 * v1prior));
        c24 = s1 * (U(1, 1) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 1) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 1) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 2) * (V(1, 2) * (cf1p2_sq + cu1p2_sq) + V(2, 2) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 2) * (cf1p2_sq + cv1p2_sq) + V(1, 2) * cu1p2 * cv1p2)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 2) * (V(1, 2) * (cf1p1_sq + cu1p1_sq) + V(2, 2) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 2) * (cf1p1_sq + cv1p1_sq) + V(1, 2) * cu1p1 * cv1p1)) + s1 * (U(1, 1) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 1) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) + s2 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 2) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 2) * cu1p1 * cv1p2 + V(2, 2) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 2) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 2) * cu1p1 * cv1p2 + V(1, 2) * cu1p2 * cv1p1));
        c25 = s1 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(3, 1) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 1) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 1) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 2) * cu1p1 * cv1p2 + V(2, 2) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 2) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 2) * cu1p1 * cv1p2 + V(1, 2) * cu1p2 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 1) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(3, 2) * (V(1, 2) * cu1p1 + V(2, 2) * cv1p1) + V(1, 2) * (V(3, 2) * cu1p1 + V(1, 2) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 2) * cv1p1 * u1prior + V(2, 2) * cu1p1 * v1prior) + V(2, 2) * (V(3, 2) * cv1p1 + V(2, 2) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 2) * cv1p1 * u1prior + V(1, 2) * cu1p1 * v1prior)) + s1 * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(3, 1) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 1) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 1) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (cf1p1_sq + cu1p1_sq) + V(2, 2) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 2) * (cf1p1_sq + cv1p1_sq) + V(1, 2) * cu1p1 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 1) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(3, 2) * (V(1, 2) * cu1p2 + V(2, 2) * cv1p2) + V(1, 2) * (V(3, 2) * cu1p2 + V(1, 2) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 2) * cv1p2 * u1prior + V(2, 2) * cu1p2 * v1prior) + V(2, 2) * (V(3, 2) * cv1p2 + V(2, 2) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 2) * cv1p2 * u1prior + V(1, 2) * cu1p2 * v1prior));
        c26 = s1 * (U(3, 1) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 1) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 1) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(3, 2) * (V(1, 2) * cu1p1 + V(2, 2) * cv1p1) + V(1, 2) * (V(3, 2) * cu1p1 + V(1, 2) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 2) * cv1p1 * u1prior + V(2, 2) * cu1p1 * v1prior) + V(2, 2) * (V(3, 2) * cv1p1 + V(2, 2) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 2) * cv1p1 * u1prior + V(1, 2) * cu1p1 * v1prior)) + s1 * (V(1, 2) * (V(1, 1) * (cf1p1_sq + cu1p1_sq) + V(2, 1) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 1) * (cf1p1_sq + cv1p1_sq) + V(1, 1) * cu1p1 * cv1p1)) * (U(1, 1) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 1) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 1) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (cf1p1_sq + cu1p1_sq) + V(2, 2) * cu1p1 * cv1p1) + V(2, 2) * (V(2, 2) * (cf1p1_sq + cv1p1_sq) + V(1, 2) * cu1p1 * cv1p1)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 1) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p1_sq + cu2p1_sq) + U(2, 1) * cu2p1 * cv2p1) + U(2, 2) * (U(2, 1) * (cf2p1_sq + cv2p1_sq) + U(1, 1) * cu2p1 * cv2p1)) * (V(1, 2) * (V(3, 2) * u1prior + V(1, 2) * (f1prior_sq + u1prior_sq) + V(2, 2) * u1prior * v1prior) + V(2, 2) * (V(3, 2) * v1prior + V(2, 2) * (f1prior_sq + v1prior_sq) + V(1, 2) * u1prior * v1prior) + V(3, 2) * (V(3, 2) + V(1, 2) * u1prior + V(2, 2) * v1prior));
        c27 = s1 * (U(1, 1) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 1) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s2 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(1, 2) * (cf1p2_sq + cu1p2_sq) + V(2, 2) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 2) * (cf1p2_sq + cv1p2_sq) + V(1, 2) * cu1p2 * cv1p2)) + s1 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 1) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 1) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) + s2 * (V(1, 2) * (V(1, 2) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 2) * cu1p1 * cv1p2 + V(2, 2) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 2) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 2) * cu1p1 * cv1p2 + V(1, 2) * cu1p2 * cv1p1)) * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2));
        c28 = s1 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(3, 1) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 1) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 1) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 2) * cu1p1 * cv1p2 + V(2, 2) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 2) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 2) * cu1p1 * cv1p2 + V(1, 2) * cu1p2 * cv1p1)) * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 1) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(3, 2) * (V(1, 2) * cu1p2 + V(2, 2) * cv1p2) + V(1, 2) * (V(3, 2) * cu1p2 + V(1, 2) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 2) * cv1p2 * u1prior + V(2, 2) * cu1p2 * v1prior) + V(2, 2) * (V(3, 2) * cv1p2 + V(2, 2) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 2) * cv1p2 * u1prior + V(1, 2) * cu1p2 * v1prior)) + s1 * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(3, 1) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 1) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 1) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (cf1p2_sq + cu1p2_sq) + V(2, 2) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 2) * (cf1p2_sq + cv1p2_sq) + V(1, 2) * cu1p2 * cv1p2)) * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 1) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(3, 2) * (V(1, 2) * cu1p1 + V(2, 2) * cv1p1) + V(1, 2) * (V(3, 2) * cu1p1 + V(1, 2) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 2) * cv1p1 * u1prior + V(2, 2) * cu1p1 * v1prior) + V(2, 2) * (V(3, 2) * cv1p1 + V(2, 2) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 2) * cv1p1 * u1prior + V(1, 2) * cu1p1 * v1prior));
        c29 = s1 * (U(3, 1) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 1) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 1) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s1 * (U(3, 1) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 1) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 1) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) + s2 * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(3, 2) * (V(1, 2) * cu1p2 + V(2, 2) * cv1p2) + V(1, 2) * (V(3, 2) * cu1p2 + V(1, 2) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 2) * cv1p2 * u1prior + V(2, 2) * cu1p2 * v1prior) + V(2, 2) * (V(3, 2) * cv1p2 + V(2, 2) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 2) * cv1p2 * u1prior + V(1, 2) * cu1p2 * v1prior)) + s2 * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(3, 2) * (V(1, 2) * cu1p1 + V(2, 2) * cv1p1) + V(1, 2) * (V(3, 2) * cu1p1 + V(1, 2) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 2) * cv1p1 * u1prior + V(2, 2) * cu1p1 * v1prior) + V(2, 2) * (V(3, 2) * cv1p1 + V(2, 2) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 2) * cv1p1 * u1prior + V(1, 2) * cu1p1 * v1prior)) + s1 * (V(1, 2) * (V(1, 1) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 1) * cu1p1 * cv1p2 + V(2, 1) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 1) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 1) * cu1p1 * cv1p2 + V(1, 1) * cu1p2 * cv1p1)) * (U(1, 1) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 1) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 1) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (2 * cf1p1 * cf1p2 + 2 * cu1p1 * cu1p2) + V(2, 2) * cu1p1 * cv1p2 + V(2, 2) * cu1p2 * cv1p1) + V(2, 2) * (V(2, 2) * (2 * cf1p1 * cf1p2 + 2 * cv1p1 * cv1p2) + V(1, 2) * cu1p1 * cv1p2 + V(1, 2) * cu1p2 * cv1p1)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 1) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (2 * cf2p1 * cf2p2 + 2 * cu2p1 * cu2p2) + U(2, 1) * cu2p1 * cv2p2 + U(2, 1) * cu2p2 * cv2p1) + U(2, 2) * (U(2, 1) * (2 * cf2p1 * cf2p2 + 2 * cv2p1 * cv2p2) + U(1, 1) * cu2p1 * cv2p2 + U(1, 1) * cu2p2 * cv2p1)) * (V(1, 2) * (V(3, 2) * u1prior + V(1, 2) * (f1prior_sq + u1prior_sq) + V(2, 2) * u1prior * v1prior) + V(2, 2) * (V(3, 2) * v1prior + V(2, 2) * (f1prior_sq + v1prior_sq) + V(1, 2) * u1prior * v1prior) + V(3, 2) * (V(3, 2) + V(1, 2) * u1prior + V(2, 2) * v1prior));
        c210 = s1 * (U(3, 1) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 1) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 1) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(3, 2) * (U(1, 1) * cu2p1 + U(2, 1) * cv2p1) + U(1, 2) * (U(3, 1) * cu2p1 + U(1, 1) * (2 * cf2p1 * f2prior + 2 * cu2p1 * u2prior) + U(2, 1) * cv2p1 * u2prior + U(2, 1) * cu2p1 * v2prior) + U(2, 2) * (U(3, 1) * cv2p1 + U(2, 1) * (2 * cf2p1 * f2prior + 2 * cv2p1 * v2prior) + U(1, 1) * cv2p1 * u2prior + U(1, 1) * cu2p1 * v2prior)) * (V(1, 2) * (V(3, 2) * u1prior + V(1, 2) * (f1prior_sq + u1prior_sq) + V(2, 2) * u1prior * v1prior) + V(2, 2) * (V(3, 2) * v1prior + V(2, 2) * (f1prior_sq + v1prior_sq) + V(1, 2) * u1prior * v1prior) + V(3, 2) * (V(3, 2) + V(1, 2) * u1prior + V(2, 2) * v1prior)) + s1 * (V(3, 2) * (V(1, 1) * cu1p1 + V(2, 1) * cv1p1) + V(1, 2) * (V(3, 1) * cu1p1 + V(1, 1) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 1) * cv1p1 * u1prior + V(2, 1) * cu1p1 * v1prior) + V(2, 2) * (V(3, 1) * cv1p1 + V(2, 1) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 1) * cv1p1 * u1prior + V(1, 1) * cu1p1 * v1prior)) * (U(1, 1) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 1) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 1) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(3, 2) * (V(1, 2) * cu1p1 + V(2, 2) * cv1p1) + V(1, 2) * (V(3, 2) * cu1p1 + V(1, 2) * (2 * cf1p1 * f1prior + 2 * cu1p1 * u1prior) + V(2, 2) * cv1p1 * u1prior + V(2, 2) * cu1p1 * v1prior) + V(2, 2) * (V(3, 2) * cv1p1 + V(2, 2) * (2 * cf1p1 * f1prior + 2 * cv1p1 * v1prior) + V(1, 2) * cv1p1 * u1prior + V(1, 2) * cu1p1 * v1prior)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior));
        c211 = s1 * (U(1, 1) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 1) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 2) * (V(1, 2) * (cf1p2_sq + cu1p2_sq) + V(2, 2) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 2) * (cf1p2_sq + cv1p2_sq) + V(1, 2) * cu1p2 * cv1p2));
        c212 = s1 * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(3, 1) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 1) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 1) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (cf1p2_sq + cu1p2_sq) + V(2, 2) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 2) * (cf1p2_sq + cv1p2_sq) + V(1, 2) * cu1p2 * cv1p2)) * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 1) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(3, 2) * (V(1, 2) * cu1p2 + V(2, 2) * cv1p2) + V(1, 2) * (V(3, 2) * cu1p2 + V(1, 2) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 2) * cv1p2 * u1prior + V(2, 2) * cu1p2 * v1prior) + V(2, 2) * (V(3, 2) * cv1p2 + V(2, 2) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 2) * cv1p2 * u1prior + V(1, 2) * cu1p2 * v1prior));
        c213 = s1 * (U(3, 1) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 1) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 1) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) + s2 * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(3, 2) * (V(1, 2) * cu1p2 + V(2, 2) * cv1p2) + V(1, 2) * (V(3, 2) * cu1p2 + V(1, 2) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 2) * cv1p2 * u1prior + V(2, 2) * cu1p2 * v1prior) + V(2, 2) * (V(3, 2) * cv1p2 + V(2, 2) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 2) * cv1p2 * u1prior + V(1, 2) * cu1p2 * v1prior)) + s1 * (V(1, 2) * (V(1, 1) * (cf1p2_sq + cu1p2_sq) + V(2, 1) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 1) * (cf1p2_sq + cv1p2_sq) + V(1, 1) * cu1p2 * cv1p2)) * (U(1, 1) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 1) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 1) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(1, 2) * (V(1, 2) * (cf1p2_sq + cu1p2_sq) + V(2, 2) * cu1p2 * cv1p2) + V(2, 2) * (V(2, 2) * (cf1p2_sq + cv1p2_sq) + V(1, 2) * cu1p2 * cv1p2)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s1 * (U(1, 1) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 1) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(1, 1) * (cf2p2_sq + cu2p2_sq) + U(2, 1) * cu2p2 * cv2p2) + U(2, 2) * (U(2, 1) * (cf2p2_sq + cv2p2_sq) + U(1, 1) * cu2p2 * cv2p2)) * (V(1, 2) * (V(3, 2) * u1prior + V(1, 2) * (f1prior_sq + u1prior_sq) + V(2, 2) * u1prior * v1prior) + V(2, 2) * (V(3, 2) * v1prior + V(2, 2) * (f1prior_sq + v1prior_sq) + V(1, 2) * u1prior * v1prior) + V(3, 2) * (V(3, 2) + V(1, 2) * u1prior + V(2, 2) * v1prior));
        c214 = s1 * (U(3, 1) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 1) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 1) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(3, 2) * (U(1, 1) * cu2p2 + U(2, 1) * cv2p2) + U(1, 2) * (U(3, 1) * cu2p2 + U(1, 1) * (2 * cf2p2 * f2prior + 2 * cu2p2 * u2prior) + U(2, 1) * cv2p2 * u2prior + U(2, 1) * cu2p2 * v2prior) + U(2, 2) * (U(3, 1) * cv2p2 + U(2, 1) * (2 * cf2p2 * f2prior + 2 * cv2p2 * v2prior) + U(1, 1) * cv2p2 * u2prior + U(1, 1) * cu2p2 * v2prior)) * (V(1, 2) * (V(3, 2) * u1prior + V(1, 2) * (f1prior_sq + u1prior_sq) + V(2, 2) * u1prior * v1prior) + V(2, 2) * (V(3, 2) * v1prior + V(2, 2) * (f1prior_sq + v1prior_sq) + V(1, 2) * u1prior * v1prior) + V(3, 2) * (V(3, 2) + V(1, 2) * u1prior + V(2, 2) * v1prior)) + s1 * (V(3, 2) * (V(1, 1) * cu1p2 + V(2, 1) * cv1p2) + V(1, 2) * (V(3, 1) * cu1p2 + V(1, 1) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 1) * cv1p2 * u1prior + V(2, 1) * cu1p2 * v1prior) + V(2, 2) * (V(3, 1) * cv1p2 + V(2, 1) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 1) * cv1p2 * u1prior + V(1, 1) * cu1p2 * v1prior)) * (U(1, 1) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 1) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 1) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) + s2 * (V(3, 2) * (V(1, 2) * cu1p2 + V(2, 2) * cv1p2) + V(1, 2) * (V(3, 2) * cu1p2 + V(1, 2) * (2 * cf1p2 * f1prior + 2 * cu1p2 * u1prior) + V(2, 2) * cv1p2 * u1prior + V(2, 2) * cu1p2 * v1prior) + V(2, 2) * (V(3, 2) * cv1p2 + V(2, 2) * (2 * cf1p2 * f1prior + 2 * cv1p2 * v1prior) + V(1, 2) * cv1p2 * u1prior + V(1, 2) * cu1p2 * v1prior)) * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior));
        c215 = s1 * (U(1, 1) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 1) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 1) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) * (V(1, 2) * (V(3, 1) * u1prior + V(1, 1) * (f1prior_sq + u1prior_sq) + V(2, 1) * u1prior * v1prior) + V(2, 2) * (V(3, 1) * v1prior + V(2, 1) * (f1prior_sq + v1prior_sq) + V(1, 1) * u1prior * v1prior) + V(3, 2) * (V(3, 1) + V(1, 1) * u1prior + V(2, 1) * v1prior)) + s2 * (U(1, 2) * (U(3, 1) * u2prior + U(1, 1) * (f2prior_sq + u2prior_sq) + U(2, 1) * u2prior * v2prior) + U(2, 2) * (U(3, 1) * v2prior + U(2, 1) * (f2prior_sq + v2prior_sq) + U(1, 1) * u2prior * v2prior) + U(3, 2) * (U(3, 1) + U(1, 1) * u2prior + U(2, 1) * v2prior)) * (V(1, 2) * (V(3, 2) * u1prior + V(1, 2) * (f1prior_sq + u1prior_sq) + V(2, 2) * u1prior * v1prior) + V(2, 2) * (V(3, 2) * v1prior + V(2, 2) * (f1prior_sq + v1prior_sq) + V(1, 2) * u1prior * v1prior) + V(3, 2) * (V(3, 2) + V(1, 2) * u1prior + V(2, 2) * v1prior));


        VectorXd ec(30);
        double factor;

        // ec1 << c11, c12, c13, c14, c15, c16, c17, c18, c19, c110, c111, c112, c113, c114, c115;
        // ec2 << c21, c22, c23, c24, c25, c26, c27, c28, c29, c210, c211, c212, c213, c214, c215;
        ec << c11, c12, c13, c14, c15, c16, c17, c18, c19, c110, c111, c112, c113, c114, c115, c21, c22, c23, c24, c25, c26, c27, c28, c29, c210, c211, c212, c213, c214, c215;

        l1 = 10000;
        l2 = 10000;

        ec = (1.0 / ec.norm()) * ec;

        int nroots = 0;
        Matrix<std::complex<double>, 2, 16> sols = solver_robust_autocal(ec, &nroots);
        // std::cout << "Roots: " << nroots << std::endl;
        // std::cout << "Sols:\n" << sols.real() << std::endl;
        // std::cout << "Res 0, 0: " << ec(14) << ", " << ec(15) << std::endl;

        // double best_res = std::abs(ec(14)) + std::abs(ec(15));
        double best_res = 20000000;
        double l1 = 0, l2 = 0, ll1, ll2;

        for (int i = 0; i < nroots; i++) {
            ll2 = sols(1, i).real();
            ll1 = sols(0, i).real();

            VectorXd monomials(15);
            monomials << std::pow(ll1, 4),
                std::pow(ll1, 3)* ll2,
                std::pow(ll1, 3),
                std::pow(ll1, 2)* std::pow(ll2, 2),
                std::pow(ll1, 2)* ll2,
                std::pow(ll1, 2),
                ll1* std::pow(ll2, 3),
                ll1* std::pow(ll2, 2),
                ll1* ll2,
                ll1,
                std::pow(ll2, 4), std::pow(ll2, 3), std::pow(ll2, 2), ll2, 1;

            // std::cout << "Res 1: " << ec(seq(0, 14)).dot(monomials) << std::endl;
            // std::cout << "Res 2: " << ec(seq(15, 29)).dot(monomials) << std::endl;

            // double res = std::abs(ec(seq(0, 14)).dot(monomials)) + std::abs(ec(seq(15, 29)).dot(monomials));
            double res = std::abs(ll1) + std::abs(ll2);

            if (res < best_res) {
                l1 = ll1;
                l2 = ll2;
                best_res = res;
            }
        }

        df1 = l1 * cf1p1 + l2 * cf1p2;
        du1 = l1 * cu1p1 + l2 * cu1p2;
        dv1 = l1 * cv1p1 + l2 * cv1p2;

        df2 = l1 * cf2p1 + l2 * cf2p2;
        du2 = l1 * cu2p1 + l2 * cu2p2;
        dv2 = l1 * cv2p1 + l2 * cv2p2;
        err(k) = df1 * df1 + du1 * du1 + dv1 * dv1 + df2 * df2 + du2 * du2 + dv2 * dv2;

        f1n = df1 + f1prior;
        u1n = du1 + u1prior;
        v1n = dv1 + v1prior;

        f2n = df2 + f2prior;
        u2n = du2 + u2prior;
        v2n = dv2 + v2prior;

        // next iter
        if (k > 0 && !all_iters) {
            // std::cout << "Rel change: " << std::abs(err(k - 1) - err(k)) / std::abs(err(k - 1)) << std::endl;
            if ((std::abs(err(k - 1) - err(k)) / std::abs(err(k - 1)) < 1e-8) || (std::abs(err(k)) < 1e-4))
                break;
        }
    }
    
    return std::tuple<double, double, double, double, double, double, int, VectorXd>(f1n, u1n, v1n, f2n, u2n, v2n, k, err);
}

PYBIND11_MODULE(iterative_focal, m) {
    m.doc() = "pybind11 example plugin"; // optional module docstring

    m.def("focals_from_f", &focals_from_F, "A function that adds two numbers");
}